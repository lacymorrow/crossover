!( function ( r, e ) {

	let n; typeof exports === 'object' ? ( n = e(), typeof module === 'object' && module && module.exports && ( exports = module.exports = n ), exports.randomColor = n ) : typeof define === 'function' && define.amd ? define( [], e ) : r.randomColor = e()

} )( this, () => {

	let o = null; const s = {}; r( 'monochrome', null, [ [ 0, 0 ], [ 100, 0 ] ] ), r( 'red', [ -26, 18 ], [
		[ 20, 100 ], [ 30, 92 ], [ 40, 89 ], [ 50, 85 ], [ 60, 78 ], [ 70, 70 ], [ 80, 60 ], [ 90, 55 ], [ 100, 50 ] 
	] ), r( 'orange', [ 18, 46 ], [
		[ 20, 100 ], [ 30, 93 ], [ 40, 88 ], [ 50, 86 ], [ 60, 85 ], [ 70, 70 ], [ 100, 70 ] 
	] ), r( 'yellow', [ 46, 62 ], [
		[ 25, 100 ], [ 40, 94 ], [ 50, 89 ], [ 60, 86 ], [ 70, 84 ], [ 80, 82 ], [ 90, 80 ], [ 100, 75 ] 
	] ), r( 'green', [ 62, 178 ], [
		[ 30, 100 ], [ 40, 90 ], [ 50, 85 ], [ 60, 81 ], [ 70, 74 ], [ 80, 64 ], [ 90, 50 ], [ 100, 40 ] 
	] ), r( 'blue', [ 178, 257 ], [
		[ 20, 100 ], [ 30, 86 ], [ 40, 80 ], [ 50, 74 ], [ 60, 60 ], [ 70, 52 ], [ 80, 44 ], [ 90, 39 ], [ 100, 35 ] 
	] ), r( 'purple', [ 257, 282 ], [
		[ 20, 100 ], [ 30, 87 ], [ 40, 79 ], [ 50, 70 ], [ 60, 65 ], [ 70, 59 ], [ 80, 52 ], [ 90, 45 ], [ 100, 42 ] 
	] ), r( 'pink', [ 282, 334 ], [
		[ 20, 100 ], [ 30, 90 ], [ 40, 86 ], [ 60, 84 ], [ 80, 80 ], [ 90, 75 ], [ 100, 73 ] 
	] ); const i = []; var f = function ( r ) {

		if ( void 0 !== ( r = r || {} ).seed && r.seed !== null && r.seed === parseInt( r.seed, 10 ) ) {

			o = r.seed

		} else if ( typeof r.seed === 'string' ) {

			o = ( function ( r ) {

				for ( var e = 0, n = 0; n !== r.length && !( e >= Number.MAX_SAFE_INTEGER ); n++ ) {

					e += r.charCodeAt( n )

				}

				return e

			} )( r.seed )

		} else {

			if ( void 0 !== r.seed && r.seed !== null ) {

				throw new TypeError( 'The seed value must be an integer or string' )

			}

			o = null

		}

		let e; let n; if ( r.count === null || void 0 === r.count ) {

			return ( function ( r, e ) {

				switch ( e.format ) {

				case 'hsvArray': return r; case 'hslArray': return d( r ); case 'hsl': var n = d( r )

					return 'hsl(' + n[0] + ', ' + n[1] + '%, ' + n[2] + '%)'; case 'hsla': var t = d( r ); var a = e.alpha || Math.random()

					return 'hsla(' + t[0] + ', ' + t[1] + '%, ' + t[2] + '%, ' + a + ')'; case 'rgbArray': return h( r ); case 'rgb': return 'rgb(' + h( r ).join( ', ' ) + ')'; case 'rgba': var u = h( r ); var a = e.alpha || Math.random()

					return 'rgba(' + u.join( ', ' ) + ', ' + a + ')'; default: return ( function ( r ) {

					const e = h( r ); function n( r ) {

						const e = r.toString( 16 )

						return e.length == 1 ? '0' + e : e

					}

					return '#' + n( e[0] ) + n( e[1] ) + n( e[2] )

				} )( r )

				}

			} )( [
				e = ( function ( r ) {

					{

						if ( i.length > 0 ) {

							var e = c( o = ( function ( r ) {

								if ( isNaN( r ) ) {

									if ( typeof r === 'string' ) {

										if ( s[r] ) {

											const e = s[r]; if ( e.hueRange ) {

												return e.hueRange

											}

										} else if ( r.match( /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i ) ) {

											return l( g( r )[0] ).hueRange

										}

									}

								} else {

									const n = parseInt( r ); if ( n < 360 && n > 0 ) {

										return l( r ).hueRange

									}

								}

								return [ 0, 360 ]

							} )( r.hue ) ); const n = ( o[1] - o[0] ) / i.length; let t = parseInt( ( e - o[0] ) / n ); !0 === i[t] ? t = ( t + 2 ) % i.length : i[t] = !0; const a = ( o[0] + t * n ) % 359; const u = ( o[0] + ( t + 1 ) * n ) % 359

							return ( e = c( o = [ a, u ] ) ) < 0 && ( e = 360 + e ), e

						}

						var o = ( function ( r ) {

							if ( typeof parseInt( r ) === 'number' ) {

								const e = parseInt( r ); if ( e < 360 && e > 0 ) {

									return [ e, e ]

								}

							}

							if ( typeof r === 'string' ) {

								if ( s[r] ) {

									const n = s[r]; if ( n.hueRange ) {

										return n.hueRange

									}

								} else if ( r.match( /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i ) ) {

									const t = g( r )[0]

									return [ t, t ]

								}

							}

							return [ 0, 360 ]

						} )( r.hue )

						return ( e = c( o ) ) < 0 && ( e = 360 + e ), e

					}

				} )( r ), n = ( function ( r, e ) {

					if ( e.hue === 'monochrome' ) {

						return 0

					}

					if ( e.luminosity === 'random' ) {

						return c( [ 0, 100 ] )

					}

					const n = ( function ( r ) {

						return l( r ).saturationRange

					} )( r ); let t = n[0]; let a = n[1]; switch ( e.luminosity ) {

					case 'bright': t = 55; break; case 'dark': t = a - 10; break; case 'light': a = 55

					}

					return c( [ t, a ] )

				} )( e, r ), ( function ( r, e, n ) {

					let t = ( function ( r, e ) {

						for ( let n = l( r ).lowerBounds, t = 0; t < n.length - 1; t++ ) {

							const a = n[t][0]; const u = n[t][1]; const o = n[t + 1][0]; const s = n[t + 1][1]; if ( a <= e && e <= o ) {

								const i = ( s - u ) / ( o - a )

								return i * e + ( u - i * a )

							}

						}

						return 0

					} )( r, e ); let a = 100; switch ( n.luminosity ) {

					case 'dark': a = t + 20; break; case 'light': t = ( a + t ) / 2; break; case 'random': t = 0, a = 100

					}

					return c( [ t, a ] )

				} )( e, n, r ) 
			], r )

		}

		for ( var t = r.count, a = [], u = 0; u < r.count; u++ ) {

			i.push( !1 )

		}

		for ( r.count = null; t > a.length; ) {

			o && r.seed && ( r.seed += 1 ), a.push( f( r ) )

		}

		return r.count = t, a

	}

	function l( r ) {

		for ( const e in r >= 334 && r <= 360 && ( r -= 360 ), s ) {

			const n = s[e]; if ( n.hueRange && r >= n.hueRange[0] && r <= n.hueRange[1] ) {

				return s[e]

			}

		}

		return 'Color not found'

	}

	function c( r ) {

		if ( o === null ) {

			let e = Math.random()

			return e += 0.618033988749895, e %= 1, Math.floor( r[0] + e * ( r[1] + 1 - r[0] ) )

		}

		const n = r[1] || 1; const t = r[0] || 0; const a = ( o = ( 9301 * o + 49297 ) % 233280 ) / 233280

		return Math.floor( t + a * ( n - t ) )

	}

	function r( r, e, n ) {

		const t = n[0][0]; const a = n[n.length - 1][0]; const u = n[n.length - 1][1]; const o = n[0][1]; s[r] = { hueRange: e, lowerBounds: n, saturationRange: [ t, a ], brightnessRange: [ u, o ] }

	}

	function h( r ) {

		let e = r[0]; e === 0 && ( e = 1 ), e === 360 && ( e = 359 ), e /= 360; const n = r[1] / 100; const t = r[2] / 100; const a = Math.floor( 6 * e ); const u = 6 * e - a; const o = t * ( 1 - n ); const s = t * ( 1 - u * n ); const i = t * ( 1 - ( 1 - u ) * n ); let f = 256; let l = 256; let c = 256; switch ( a ) {

		case 0: f = t, l = i, c = o; break; case 1: f = s, l = t, c = o; break; case 2: f = o, l = t, c = i; break; case 3: f = o, l = s, c = t; break; case 4: f = i, l = o, c = t; break; case 5: f = t, l = o, c = s

		}

		return [
			Math.floor( 255 * f ), Math.floor( 255 * l ), Math.floor( 255 * c ) 
		]

	}

	function g( r ) {

		r = ( r = r.replace( /^#/, '' ) ).length === 3 ? r.replace( /(.)/g, '$1$1' ) : r; const e = parseInt( r.substr( 0, 2 ), 16 ) / 255; const n = parseInt( r.substr( 2, 2 ), 16 ) / 255; const t = parseInt( r.substr( 4, 2 ), 16 ) / 255; const a = Math.max( e, n, t ); const u = a - Math.min( e, n, t ); const o = a ? u / a : 0; switch ( a ) {

		case e: return [
			( n - t ) / u % 6 * 60 || 0, o, a 
		]; case n: return [
			60 * ( ( t - e ) / u + 2 ) || 0, o, a 
		]; case t: return [
			60 * ( ( e - n ) / u + 4 ) || 0, o, a 
		]

		}

	}

	function d( r ) {

		const e = r[0]; const n = r[1] / 100; const t = r[2] / 100; const a = ( 2 - n ) * t

		return [
			e, Math.round( n * t / ( a < 1 ? a : 2 - a ) * 1e4 ) / 100, a / 2 * 100 
		]

	}

	return f

} )
